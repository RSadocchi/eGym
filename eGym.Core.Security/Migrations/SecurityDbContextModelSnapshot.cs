// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eGym.Core.Security;

namespace eGym.Core.Security.Migrations
{
    [DbContext(typeof(SecurityDbContext))]
    partial class SecurityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("eGym.Core.Security.Identity.Captcha", b =>
                {
                    b.Property<string>("TokenID")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("Validity")
                        .HasColumnType("datetime2");

                    b.HasKey("TokenID");

                    b.ToTable("Captcha", "Security");
                });

            modelBuilder.Entity("eGym.Core.Security.Identity.PasswordHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("ChangedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordHistory", "Security");
                });

            modelBuilder.Entity("eGym.Core.Security.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID")
                        .UseIdentityColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", "Security");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "4e3de014-daa8-4816-ab06-1f2fa329d36a",
                            Name = "Auto",
                            NormalizedName = "AUTO"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "49ed6c03-f37f-4529-81a3-45e6f18b7338",
                            Name = "SysAdmin",
                            NormalizedName = "SYSADMIN"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "29ecb2ba-8ec0-453a-81d2-1d4de020b111",
                            Name = "Administarator",
                            NormalizedName = "ADMINISTARATOR"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "bda1374e-ecc7-44ac-a169-53cc95cc76ba",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("eGym.Core.Security.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleClaimID")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", "Security");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "AUTO",
                            ClaimValue = "1",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "GOD",
                            ClaimValue = "1",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "ADMINISTRATOR",
                            ClaimValue = "1",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "USER",
                            ClaimValue = "1",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "ADMINISTRATOR",
                            ClaimValue = "1",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "USER",
                            ClaimValue = "1",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "USER",
                            ClaimValue = "1",
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("eGym.Core.Security.Identity.ServiceToken", b =>
                {
                    b.Property<int>("ST_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ST_Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("ST_IssueDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ST_RequestorCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ST_Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ST_ID");

                    b.ToTable("ServiceToken", "Security");
                });

            modelBuilder.Entity("eGym.Core.Security.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Culture")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EmailConfirmedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PINHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordExpirationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("ntext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PhoneNumberConfirmedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PolicyAcceptanceDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PrivacyAcceptanceDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("TwoFactorTokenProviders")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", "Security");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c92ba590-dc27-45a2-9bb3-3a9dbb4b98f5",
                            Culture = "it-IT",
                            Disabled = true,
                            Email = "dev@digitalbubbles.cloud",
                            EmailConfirmed = true,
                            EmailConfirmedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "DEV@DIGITALBUBBLES.CLOUD",
                            NormalizedUserName = "AUTO",
                            PasswordExpirationDateTime = new DateTime(2121, 1, 22, 22, 58, 8, 248, DateTimeKind.Local).AddTicks(3667),
                            PasswordHash = "AQAAAAEAACcQAAAAEJo018FWHhXai+wRLzhyB3QMiWS7PKja6O9B77XNxSrOEIMKu1ySsygAGsikKnLmKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "26a7ec2b-d1d5-4447-b490-4360bf4e04b6",
                            TwoFactorEnabled = false,
                            UserName = "auto"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b35cfa6e-602d-478b-8f7d-0128553f51a4",
                            Culture = "it-IT",
                            Disabled = false,
                            Email = "info@digitalbubbles.cloud",
                            EmailConfirmed = true,
                            EmailConfirmedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "INFO@DIGITALBUBBLES.CLOUD",
                            NormalizedUserName = "ADMIN",
                            PasswordExpirationDateTime = new DateTime(2121, 1, 22, 22, 58, 8, 267, DateTimeKind.Local).AddTicks(3834),
                            PasswordHash = "AQAAAAEAACcQAAAAEOo5SlT332byVQat31t84vMCadsxehuHqeRrHj9PZIKsCpx9mTg2rf0dl5Km7+hzXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef1a07fb-6e9f-47e9-bcd8-d60d59bd8c1d",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("eGym.Core.Security.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserClaimID")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", "Security");
                });

            modelBuilder.Entity("eGym.Core.Security.Identity.UserLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", "Security");
                });

            modelBuilder.Entity("eGym.Core.Security.Identity.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", "Security");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            RoleId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("eGym.Core.Security.Identity.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserToken", "Security");
                });

            modelBuilder.Entity("eGym.Core.Security.Identity.UserVoucher", b =>
                {
                    b.Property<int>("UV_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("UV_AnagID")
                        .HasColumnType("int");

                    b.Property<int>("UV_LastModifyByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UV_LastModifyDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UV_PolicyAcceptanceDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UV_PrivacyAcceptanceDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UV_RegistrationClosedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UV_RegistrationCompletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UV_RegistrationStartedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UV_SentToAnagID")
                        .HasColumnType("int");

                    b.Property<string>("UV_SentToCulture")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("UV_SentToEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UV_SentToFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UV_SentToLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UV_SentToMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UV_SentToRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UV_SentToTaxCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UV_StatusID")
                        .HasColumnType("int");

                    b.Property<string>("UV_TemporaryToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UV_TemporaryTokenExpirationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UV_UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UV_UserFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UV_UserID")
                        .HasColumnType("int");

                    b.Property<string>("UV_UserLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UV_UserMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UV_Voucher")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime>("UV_VoucherCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UV_VoucherExpirationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UV_ID");

                    b.HasIndex("UserId");

                    b.ToTable("UserVoucher", "Security");
                });

            modelBuilder.Entity("eGym.Core.Security.Identity.PasswordHistory", b =>
                {
                    b.HasOne("eGym.Core.Security.Identity.User", "User")
                        .WithMany("PasswordHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("eGym.Core.Security.Identity.RoleClaim", b =>
                {
                    b.HasOne("eGym.Core.Security.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eGym.Core.Security.Identity.UserClaim", b =>
                {
                    b.HasOne("eGym.Core.Security.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eGym.Core.Security.Identity.UserLogin", b =>
                {
                    b.HasOne("eGym.Core.Security.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eGym.Core.Security.Identity.UserRole", b =>
                {
                    b.HasOne("eGym.Core.Security.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eGym.Core.Security.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eGym.Core.Security.Identity.UserToken", b =>
                {
                    b.HasOne("eGym.Core.Security.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eGym.Core.Security.Identity.UserVoucher", b =>
                {
                    b.HasOne("eGym.Core.Security.Identity.User", "User")
                        .WithMany("UserVouchers")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eGym.Core.Security.Identity.User", b =>
                {
                    b.Navigation("PasswordHistory");

                    b.Navigation("UserVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
