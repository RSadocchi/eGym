// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eGym.Core.Domain;

namespace eGym.Core.Domain.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210122235125_cmsTablesRemoved")]
    partial class cmsTablesRemoved
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("eGym.Core.Domain.Anag_Address", b =>
                {
                    b.Property<int>("Adr_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Adr_Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Adr_Address1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Adr_Address2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Adr_AnagID")
                        .HasColumnType("int");

                    b.Property<string>("Adr_City")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Adr_Country")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.Property<string>("Adr_CountrySpec")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Adr_District")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Adr_Floor")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Adr_HouseNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Adr_Interior")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Adr_PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Adr_Staircase")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Adr_ID");

                    b.HasIndex("Adr_AnagID");

                    b.HasIndex("Adr_Country");

                    b.ToTable("Anag_Address", "dbo");
                });

            modelBuilder.Entity("eGym.Core.Domain.Anag_AddressRole", b =>
                {
                    b.Property<int>("AdrR_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AdrR_AddressID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AdrR_EndDate")
                        .HasColumnType("date");

                    b.Property<short>("AdrR_RoleID")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("AdrR_StartDate")
                        .HasColumnType("date");

                    b.HasKey("AdrR_ID");

                    b.HasIndex("AdrR_AddressID");

                    b.ToTable("Anag_AddressRole", "dbo");
                });

            modelBuilder.Entity("eGym.Core.Domain.Anag_Contact", b =>
                {
                    b.Property<int>("Cnt_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Cnt_AnagID")
                        .HasColumnType("int");

                    b.Property<bool>("Cnt_DefaultInType")
                        .HasColumnType("bit");

                    b.Property<string>("Cnt_Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Cnt_TypeID")
                        .HasColumnType("smallint");

                    b.Property<string>("Cnt_Value")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Cnt_ID");

                    b.HasIndex("Cnt_AnagID");

                    b.ToTable("Anag_Contact", "dbo");
                });

            modelBuilder.Entity("eGym.Core.Domain.Anag_CorporateRole", b =>
                {
                    b.Property<int>("CR_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CR_AnagID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CR_EndDate")
                        .HasColumnType("date");

                    b.Property<short>("CR_RoleID")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CR_StartDate")
                        .HasColumnType("date");

                    b.HasKey("CR_ID");

                    b.HasIndex("CR_AnagID");

                    b.ToTable("Anag_CorporateRole", "dbo");
                });

            modelBuilder.Entity("eGym.Core.Domain.Anag_Document", b =>
                {
                    b.Property<int>("Doc_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Doc_AnagID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Doc_CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Doc_Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Doc_EmissionCity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Doc_EmissionCountry")
                        .HasColumnType("char(3)");

                    b.Property<string>("Doc_EmissionNote")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<short?>("Doc_EmitterID")
                        .HasColumnType("smallint");

                    b.Property<string>("Doc_EmitterName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Doc_ExpiringDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Doc_IssueDate")
                        .HasColumnType("date");

                    b.Property<string>("Doc_Number")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Doc_Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Doc_TypeID")
                        .HasColumnType("smallint");

                    b.HasKey("Doc_ID");

                    b.HasIndex("Doc_AnagID");

                    b.ToTable("Anag_Document", "dbo");
                });

            modelBuilder.Entity("eGym.Core.Domain.Anag_Master", b =>
                {
                    b.Property<int>("Ang_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Ang_Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ang_BirthCity")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Ang_BirthCountry")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.Property<string>("Ang_BirthCountrySpec")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("Ang_BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Ang_Citizenship")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Ang_FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<short>("Ang_GenderID")
                        .HasColumnType("smallint");

                    b.Property<string>("Ang_LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ang_Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ang_TaxCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("Ang_UserID")
                        .HasColumnType("int");

                    b.Property<string>("Ang_VATNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Ang_ID");

                    b.HasIndex("Ang_BirthCountry");

                    b.ToTable("Anag_Master", "dbo");
                });

            modelBuilder.Entity("eGym.Core.Domain.Anag_MasterRole", b =>
                {
                    b.Property<int>("AngR_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AngR_AnagID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AngR_EndDate")
                        .HasColumnType("date");

                    b.Property<short>("AngR_RoleID")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("AngR_StartDate")
                        .HasColumnType("date");

                    b.HasKey("AngR_ID");

                    b.HasIndex("AngR_AnagID");

                    b.ToTable("Anag_MasterRole", "dbo");
                });

            modelBuilder.Entity("eGym.Core.Domain.Athlete_DivisionXAthlete", b =>
                {
                    b.Property<int>("DXA_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("DXA_AthleteID")
                        .HasColumnType("int");

                    b.Property<int>("DXA_DivisionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DXA_FromDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DXA_ToDate")
                        .HasColumnType("date");

                    b.HasKey("DXA_ID");

                    b.HasIndex("DXA_AthleteID");

                    b.HasIndex("DXA_DivisionID");

                    b.ToTable("Athlete_DivisionXAthlete", "ath");
                });

            modelBuilder.Entity("eGym.Core.Domain.Athlete_LevelXAthlete", b =>
                {
                    b.Property<int>("LXA_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("LXA_AthleteID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LXA_FromDate")
                        .HasColumnType("date");

                    b.Property<int>("LXA_LevelID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LXA_ToDate")
                        .HasColumnType("date");

                    b.HasKey("LXA_ID");

                    b.HasIndex("LXA_AthleteID");

                    b.HasIndex("LXA_LevelID");

                    b.ToTable("Athlete_LevelXAthlete", "ath");
                });

            modelBuilder.Entity("eGym.Core.Domain.Athlete_Master", b =>
                {
                    b.Property<int>("Ath_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Ath_AnagID")
                        .HasColumnType("int");

                    b.Property<int?>("Ath_DivisionID")
                        .HasColumnType("int");

                    b.Property<int>("Ath_LevelID")
                        .HasColumnType("int");

                    b.Property<string>("Ath_Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Ath_Ranking")
                        .HasColumnType("float");

                    b.Property<int>("Ath_SportID")
                        .HasColumnType("int");

                    b.Property<double?>("Ath_Weight")
                        .HasColumnType("float");

                    b.HasKey("Ath_ID");

                    b.HasIndex("Ath_AnagID")
                        .IsUnique();

                    b.HasIndex("Ath_SportID");

                    b.ToTable("Athlete_Master", "ath");
                });

            modelBuilder.Entity("eGym.Core.Domain.Athlete_WeightXAthlete", b =>
                {
                    b.Property<int>("WXA_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("WXA_AthleteID")
                        .HasColumnType("int");

                    b.Property<DateTime>("WXA_FromDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("WXA_ToDate")
                        .HasColumnType("date");

                    b.Property<double>("WXA_Weight")
                        .HasColumnType("float");

                    b.HasKey("WXA_ID");

                    b.HasIndex("WXA_AthleteID");

                    b.ToTable("Athlete_WeightXAthlete", "ath");
                });

            modelBuilder.Entity("eGym.Core.Domain.Country", b =>
                {
                    b.Property<string>("Country_IsoCode")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)");

                    b.Property<string>("Country_CFiscCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country_CountryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country_Language")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Country_VIESCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Country_IsoCode");

                    b.HasIndex("Country_IsoCode")
                        .IsUnique()
                        .IsClustered(false);

                    b.ToTable("Country", "conf");

                    b.HasData(
                        new
                        {
                            Country_IsoCode = "004",
                            Country_CountryName = "Afganistan",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "008",
                            Country_CountryName = "Albania",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "012",
                            Country_CountryName = "Algeria",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "020",
                            Country_CountryName = "Andorra",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "024",
                            Country_CountryName = "Angola",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "660",
                            Country_CountryName = "Anguilla",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "028",
                            Country_CountryName = "Antigua e Barbuda",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "530",
                            Country_CountryName = "Antille Olandesi",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "682",
                            Country_CountryName = "Arabia Saudita",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "032",
                            Country_CountryName = "Argentina",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "051",
                            Country_CountryName = "Armenia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "533",
                            Country_CountryName = "Aruba",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "654",
                            Country_CountryName = "Ascension",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "036",
                            Country_CountryName = "Australia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "040",
                            Country_CountryName = "Austria",
                            Country_Language = "ENG",
                            Country_VIESCode = "AT"
                        },
                        new
                        {
                            Country_IsoCode = "031",
                            Country_CountryName = "Azerbaigian",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "044",
                            Country_CountryName = "Bahamas",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "048",
                            Country_CountryName = "Bahrein",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "050",
                            Country_CountryName = "Bangladesh",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "052",
                            Country_CountryName = "Barbados",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "056",
                            Country_CountryName = "Belgio",
                            Country_Language = "ENG",
                            Country_VIESCode = "BE"
                        },
                        new
                        {
                            Country_IsoCode = "084",
                            Country_CountryName = "Belize",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "204",
                            Country_CountryName = "Benin",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "060",
                            Country_CountryName = "Bermuda",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "064",
                            Country_CountryName = "Bhutan",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "112",
                            Country_CountryName = "Bielorussia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "068",
                            Country_CountryName = "Bolivia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "070",
                            Country_CountryName = "Bosnia Erzegovina",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "072",
                            Country_CountryName = "Botswana",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "076",
                            Country_CountryName = "Brasile",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "096",
                            Country_CountryName = "Brunei",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "100",
                            Country_CountryName = "Bulgaria",
                            Country_Language = "ENG",
                            Country_VIESCode = "BG"
                        },
                        new
                        {
                            Country_IsoCode = "854",
                            Country_CountryName = "Burkina Faso (Alto Volta)",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "108",
                            Country_CountryName = "Burundi",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "120",
                            Country_CountryName = "Camerun",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "124",
                            Country_CountryName = "Canada",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "132",
                            Country_CountryName = "Capo Verde",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "136",
                            Country_CountryName = "Cayman",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "203",
                            Country_CountryName = "Ceca Repubblica",
                            Country_Language = "ENG",
                            Country_VIESCode = "CZ"
                        },
                        new
                        {
                            Country_IsoCode = "140",
                            Country_CountryName = "Centrafricana Repubblica",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "148",
                            Country_CountryName = "Ciad",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "152",
                            Country_CountryName = "Cile",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "156",
                            Country_CountryName = "Cina",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "196",
                            Country_CountryName = "Cipro",
                            Country_Language = "ENG",
                            Country_VIESCode = "CY"
                        },
                        new
                        {
                            Country_IsoCode = "170",
                            Country_CountryName = "Colombia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "174",
                            Country_CountryName = "Comore",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "180",
                            Country_CountryName = "Congo Rep.Dem. (Zaire)",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "178",
                            Country_CountryName = "Congo Repubblica",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "184",
                            Country_CountryName = "Cook",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "408",
                            Country_CountryName = "Corea del Nord",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "410",
                            Country_CountryName = "Corea del Sud",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "384",
                            Country_CountryName = "Costa d'Avorio",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "188",
                            Country_CountryName = "Costa Rica",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "191",
                            Country_CountryName = "Croazia",
                            Country_Language = "ENG",
                            Country_VIESCode = "HR"
                        },
                        new
                        {
                            Country_IsoCode = "192",
                            Country_CountryName = "Cuba",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "208",
                            Country_CountryName = "Danimarca",
                            Country_Language = "ENG",
                            Country_VIESCode = "DK"
                        },
                        new
                        {
                            Country_IsoCode = "212",
                            Country_CountryName = "Dominica",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "214",
                            Country_CountryName = "Dominicana Repubblica",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "218",
                            Country_CountryName = "Ecuador",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "818",
                            Country_CountryName = "Egitto",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "222",
                            Country_CountryName = "El Salvador",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "784",
                            Country_CountryName = "Emirati Arabi Uniti",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "232",
                            Country_CountryName = "Eritrea",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "233",
                            Country_CountryName = "Estonia",
                            Country_Language = "ENG",
                            Country_VIESCode = "EE"
                        },
                        new
                        {
                            Country_IsoCode = "231",
                            Country_CountryName = "Etiopia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "234",
                            Country_CountryName = "Faeroer",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "238",
                            Country_CountryName = "Falkland",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "242",
                            Country_CountryName = "Figi",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "608",
                            Country_CountryName = "Filippine",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "246",
                            Country_CountryName = "Finlandia",
                            Country_Language = "ENG",
                            Country_VIESCode = "FI"
                        },
                        new
                        {
                            Country_IsoCode = "250",
                            Country_CountryName = "Francia",
                            Country_Language = "ENG",
                            Country_VIESCode = "FR"
                        },
                        new
                        {
                            Country_IsoCode = "266",
                            Country_CountryName = "Gabon",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "270",
                            Country_CountryName = "Gambia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "268",
                            Country_CountryName = "Georgia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "276",
                            Country_CountryName = "Germania",
                            Country_Language = "ENG",
                            Country_VIESCode = "DE"
                        },
                        new
                        {
                            Country_IsoCode = "288",
                            Country_CountryName = "Ghana",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "388",
                            Country_CountryName = "Giamaica",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "392",
                            Country_CountryName = "Giappone",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "292",
                            Country_CountryName = "Gibilterra",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "262",
                            Country_CountryName = "Gibuti",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "400",
                            Country_CountryName = "Giordania",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "300",
                            Country_CountryName = "Grecia",
                            Country_Language = "ENG",
                            Country_VIESCode = "EL"
                        },
                        new
                        {
                            Country_IsoCode = "308",
                            Country_CountryName = "Grenada",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "304",
                            Country_CountryName = "Groenlandia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "312",
                            Country_CountryName = "Guadalupa",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "316",
                            Country_CountryName = "Guam",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "320",
                            Country_CountryName = "Guatemala",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "254",
                            Country_CountryName = "Guayana Francese",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "624",
                            Country_CountryName = "Guinea Bissau",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "226",
                            Country_CountryName = "Guinea Equatoriale",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "324",
                            Country_CountryName = "Guinea Repubblica",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "328",
                            Country_CountryName = "Guyana",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "332",
                            Country_CountryName = "Haiti",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "340",
                            Country_CountryName = "Honduras",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "344",
                            Country_CountryName = "Hong Kong",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "356",
                            Country_CountryName = "India",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "360",
                            Country_CountryName = "Indonesia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "364",
                            Country_CountryName = "Iran",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "368",
                            Country_CountryName = "Iraq",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "372",
                            Country_CountryName = "Irlanda",
                            Country_Language = "ENG",
                            Country_VIESCode = "IE"
                        },
                        new
                        {
                            Country_IsoCode = "352",
                            Country_CountryName = "Islanda",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "376",
                            Country_CountryName = "Israele",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "380",
                            Country_CountryName = "Italia",
                            Country_Language = "ITA",
                            Country_VIESCode = "IT"
                        },
                        new
                        {
                            Country_IsoCode = "891",
                            Country_CountryName = "Jugoslavia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "116",
                            Country_CountryName = "Kampuchea (Cambogia)",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "398",
                            Country_CountryName = "Kazakistan",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "404",
                            Country_CountryName = "Kenya",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "417",
                            Country_CountryName = "Kirghizistan",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "296",
                            Country_CountryName = "Kiribati",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "414",
                            Country_CountryName = "Kuwait",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "418",
                            Country_CountryName = "Laos",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "426",
                            Country_CountryName = "Lesotho",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "428",
                            Country_CountryName = "Lettonia",
                            Country_Language = "ENG",
                            Country_VIESCode = "LV"
                        },
                        new
                        {
                            Country_IsoCode = "422",
                            Country_CountryName = "Libano",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "430",
                            Country_CountryName = "Liberia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "434",
                            Country_CountryName = "Libia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "438",
                            Country_CountryName = "Liechtenstein",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "440",
                            Country_CountryName = "Lituania",
                            Country_Language = "ENG",
                            Country_VIESCode = "LT"
                        },
                        new
                        {
                            Country_IsoCode = "442",
                            Country_CountryName = "Lussemburgo",
                            Country_Language = "ENG",
                            Country_VIESCode = "LU"
                        },
                        new
                        {
                            Country_IsoCode = "446",
                            Country_CountryName = "Macao",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "807",
                            Country_CountryName = "Macedonia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "450",
                            Country_CountryName = "Madagascar",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "454",
                            Country_CountryName = "Malawi",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "458",
                            Country_CountryName = "Malaysia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "462",
                            Country_CountryName = "Maldive",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "466",
                            Country_CountryName = "Mali",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "470",
                            Country_CountryName = "Malta",
                            Country_Language = "ENG",
                            Country_VIESCode = "MT"
                        },
                        new
                        {
                            Country_IsoCode = "580",
                            Country_CountryName = "Marianne",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "504",
                            Country_CountryName = "Marocco",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "584",
                            Country_CountryName = "Marshall",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "474",
                            Country_CountryName = "Martinica",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "478",
                            Country_CountryName = "Mauritania",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "480",
                            Country_CountryName = "Mauritius",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "175",
                            Country_CountryName = "Mayotte",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "484",
                            Country_CountryName = "Messico",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "583",
                            Country_CountryName = "Micronesia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "498",
                            Country_CountryName = "Moldavia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "492",
                            Country_CountryName = "Monaco Principato",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "496",
                            Country_CountryName = "Mongolia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "500",
                            Country_CountryName = "Monserrat",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "508",
                            Country_CountryName = "Mozambico",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "104",
                            Country_CountryName = "Myanmar (Birmania)",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "516",
                            Country_CountryName = "Namibia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "520",
                            Country_CountryName = "Nauru",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "524",
                            Country_CountryName = "Nepal",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "558",
                            Country_CountryName = "Nicaragua",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "562",
                            Country_CountryName = "Niger",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "566",
                            Country_CountryName = "Nigeria",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "570",
                            Country_CountryName = "Niue",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "999",
                            Country_CountryName = "Non Classificabile",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "574",
                            Country_CountryName = "Norfolk",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "578",
                            Country_CountryName = "Norvegia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "540",
                            Country_CountryName = "Nuova Caledonia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "554",
                            Country_CountryName = "Nuova Zelanda",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "528",
                            Country_CountryName = "Olanda (Paesi Bassi)",
                            Country_Language = "ENG",
                            Country_VIESCode = "NL"
                        },
                        new
                        {
                            Country_IsoCode = "512",
                            Country_CountryName = "Oman",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "586",
                            Country_CountryName = "Pakistan",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "585",
                            Country_CountryName = "Palau",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "591",
                            Country_CountryName = "Panama",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "598",
                            Country_CountryName = "Papua Nuova Guinea",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "600",
                            Country_CountryName = "Paraguay",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "604",
                            Country_CountryName = "Perù",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "258",
                            Country_CountryName = "Polinesia Francese",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "616",
                            Country_CountryName = "Polonia",
                            Country_Language = "ENG",
                            Country_VIESCode = "PL"
                        },
                        new
                        {
                            Country_IsoCode = "620",
                            Country_CountryName = "Portogallo",
                            Country_Language = "ENG",
                            Country_VIESCode = "PT"
                        },
                        new
                        {
                            Country_IsoCode = "630",
                            Country_CountryName = "Portorico",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "634",
                            Country_CountryName = "Qatar",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "826",
                            Country_CountryName = "Regno Unito",
                            Country_Language = "ENG",
                            Country_VIESCode = "GB"
                        },
                        new
                        {
                            Country_IsoCode = "638",
                            Country_CountryName = "Reunione",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "642",
                            Country_CountryName = "Romania",
                            Country_Language = "ENG",
                            Country_VIESCode = "RO"
                        },
                        new
                        {
                            Country_IsoCode = "646",
                            Country_CountryName = "Ruanda",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "643",
                            Country_CountryName = "Russia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "659",
                            Country_CountryName = "Saint Kittis e Nevis",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "662",
                            Country_CountryName = "Saint Lucia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "666",
                            Country_CountryName = "Saint Pierre e Miquelon",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "670",
                            Country_CountryName = "Saint Vincent e Grenadine",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "090",
                            Country_CountryName = "Salomone",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "882",
                            Country_CountryName = "Samoa",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "016",
                            Country_CountryName = "Samoa Americane",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "674",
                            Country_CountryName = "San Marino",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "678",
                            Country_CountryName = "Sao Tomè e Principe",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "686",
                            Country_CountryName = "Senegal",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "690",
                            Country_CountryName = "Seychelles",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "694",
                            Country_CountryName = "Sierra Leone",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "702",
                            Country_CountryName = "Singapore",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "760",
                            Country_CountryName = "Siria",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "703",
                            Country_CountryName = "Slovacca Repubblica",
                            Country_Language = "ENG",
                            Country_VIESCode = "SK"
                        },
                        new
                        {
                            Country_IsoCode = "705",
                            Country_CountryName = "Slovenia",
                            Country_Language = "ENG",
                            Country_VIESCode = "SI"
                        },
                        new
                        {
                            Country_IsoCode = "706",
                            Country_CountryName = "Somalia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "724",
                            Country_CountryName = "Spagna",
                            Country_Language = "ENG",
                            Country_VIESCode = "ES"
                        },
                        new
                        {
                            Country_IsoCode = "144",
                            Country_CountryName = "Sri Lanka",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "840",
                            Country_CountryName = "Stati Uniti d'America",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "710",
                            Country_CountryName = "Sudafricana Repubblica",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "736",
                            Country_CountryName = "Sudan",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "740",
                            Country_CountryName = "Suriname",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "752",
                            Country_CountryName = "Svezia",
                            Country_Language = "ENG",
                            Country_VIESCode = "SE"
                        },
                        new
                        {
                            Country_IsoCode = "756",
                            Country_CountryName = "Svizzera",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "748",
                            Country_CountryName = "Swaziland",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "762",
                            Country_CountryName = "Tagikistan",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "158",
                            Country_CountryName = "Taiwan",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "834",
                            Country_CountryName = "Tanzania",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "764",
                            Country_CountryName = "Thailandia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "768",
                            Country_CountryName = "Togo",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "776",
                            Country_CountryName = "Tonga",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "780",
                            Country_CountryName = "Trinidad e Tobago",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "788",
                            Country_CountryName = "Tunisia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "792",
                            Country_CountryName = "Turchia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "795",
                            Country_CountryName = "Turkmenistan",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "796",
                            Country_CountryName = "Turks e Caicos",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "798",
                            Country_CountryName = "Tuvalu",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "804",
                            Country_CountryName = "Ucraina",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "800",
                            Country_CountryName = "Uganda",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "348",
                            Country_CountryName = "Ungheria",
                            Country_Language = "ENG",
                            Country_VIESCode = "HU"
                        },
                        new
                        {
                            Country_IsoCode = "858",
                            Country_CountryName = "Uruguay",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "860",
                            Country_CountryName = "Uzbekistan",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "548",
                            Country_CountryName = "Vanuatu",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "336",
                            Country_CountryName = "Vaticano",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "862",
                            Country_CountryName = "Venezuela",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "850",
                            Country_CountryName = "Vergini Is. Americane",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "092",
                            Country_CountryName = "Vergini Is. Britanniche",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "704",
                            Country_CountryName = "Vietnam",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "581",
                            Country_CountryName = "Wake",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "876",
                            Country_CountryName = "Wallis e Futuna",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "887",
                            Country_CountryName = "Yemen",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "894",
                            Country_CountryName = "Zambia",
                            Country_Language = "ENG"
                        },
                        new
                        {
                            Country_IsoCode = "716",
                            Country_CountryName = "Zimbabwe",
                            Country_Language = "ENG"
                        });
                });

            modelBuilder.Entity("eGym.Core.Domain.Sport_Division", b =>
                {
                    b.Property<int>("SD_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("SD_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SD_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SD_Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SD_ID");

                    b.ToTable("Sport_Division", "conf");

                    b.HasData(
                        new
                        {
                            SD_ID = 1,
                            SD_Name = "StrawWeight"
                        },
                        new
                        {
                            SD_ID = 2,
                            SD_Name = "FlyWeight"
                        },
                        new
                        {
                            SD_ID = 3,
                            SD_Name = "BantamWeight"
                        },
                        new
                        {
                            SD_ID = 4,
                            SD_Name = "FeatherWeight"
                        },
                        new
                        {
                            SD_ID = 5,
                            SD_Name = "LightWeight"
                        },
                        new
                        {
                            SD_ID = 6,
                            SD_Name = "WelterWeight"
                        },
                        new
                        {
                            SD_ID = 7,
                            SD_Name = "MiddleWeight"
                        },
                        new
                        {
                            SD_ID = 8,
                            SD_Name = "LightHeavyWeight"
                        },
                        new
                        {
                            SD_ID = 9,
                            SD_Name = "HeavyWeight"
                        });
                });

            modelBuilder.Entity("eGym.Core.Domain.Sport_DivisionLocalized", b =>
                {
                    b.Property<int>("SDL_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("SDL_Culture")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("SDL_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SDL_DivisionID")
                        .HasColumnType("int");

                    b.Property<int?>("SDL_MaxAge")
                        .HasColumnType("int");

                    b.Property<double?>("SDL_MaxWeight")
                        .HasColumnType("float");

                    b.Property<int?>("SDL_MinAge")
                        .HasColumnType("int");

                    b.Property<double?>("SDL_MinWeight")
                        .HasColumnType("float");

                    b.Property<string>("SDL_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short?>("SDL_UnitOfMeasureID")
                        .HasColumnType("smallint");

                    b.HasKey("SDL_ID");

                    b.HasIndex("SDL_DivisionID");

                    b.ToTable("Sport_DivisionLocalized", "conf");

                    b.HasData(
                        new
                        {
                            SDL_ID = 1,
                            SDL_Culture = "it",
                            SDL_DivisionID = 1,
                            SDL_MaxWeight = 52.200000000000003,
                            SDL_Name = "Paglia",
                            SDL_UnitOfMeasureID = (short)1
                        },
                        new
                        {
                            SDL_ID = 2,
                            SDL_Culture = "it",
                            SDL_DivisionID = 2,
                            SDL_MaxWeight = 56.700000000000003,
                            SDL_MinWeight = 52.200000000000003,
                            SDL_Name = "Mosca",
                            SDL_UnitOfMeasureID = (short)1
                        },
                        new
                        {
                            SDL_ID = 3,
                            SDL_Culture = "it",
                            SDL_DivisionID = 3,
                            SDL_MaxWeight = 61.200000000000003,
                            SDL_MinWeight = 56.700000000000003,
                            SDL_Name = "Gallo",
                            SDL_UnitOfMeasureID = (short)1
                        },
                        new
                        {
                            SDL_ID = 4,
                            SDL_Culture = "it",
                            SDL_DivisionID = 4,
                            SDL_MaxWeight = 65.799999999999997,
                            SDL_MinWeight = 61.200000000000003,
                            SDL_Name = "Piuma",
                            SDL_UnitOfMeasureID = (short)1
                        },
                        new
                        {
                            SDL_ID = 5,
                            SDL_Culture = "it",
                            SDL_DivisionID = 5,
                            SDL_MaxWeight = 70.299999999999997,
                            SDL_MinWeight = 65.799999999999997,
                            SDL_Name = "Leggeri",
                            SDL_UnitOfMeasureID = (short)1
                        },
                        new
                        {
                            SDL_ID = 6,
                            SDL_Culture = "it",
                            SDL_DivisionID = 6,
                            SDL_MaxWeight = 77.099999999999994,
                            SDL_MinWeight = 70.299999999999997,
                            SDL_Name = "Welter",
                            SDL_UnitOfMeasureID = (short)1
                        },
                        new
                        {
                            SDL_ID = 7,
                            SDL_Culture = "it",
                            SDL_DivisionID = 7,
                            SDL_MaxWeight = 83.900000000000006,
                            SDL_MinWeight = 77.099999999999994,
                            SDL_Name = "Medi",
                            SDL_UnitOfMeasureID = (short)1
                        },
                        new
                        {
                            SDL_ID = 8,
                            SDL_Culture = "it",
                            SDL_DivisionID = 8,
                            SDL_MaxWeight = 93.0,
                            SDL_MinWeight = 83.900000000000006,
                            SDL_Name = "Massimi leggeri",
                            SDL_UnitOfMeasureID = (short)1
                        },
                        new
                        {
                            SDL_ID = 9,
                            SDL_Culture = "it",
                            SDL_DivisionID = 9,
                            SDL_MaxWeight = 120.2,
                            SDL_MinWeight = 93.0,
                            SDL_Name = "Massimi",
                            SDL_UnitOfMeasureID = (short)1
                        });
                });

            modelBuilder.Entity("eGym.Core.Domain.Sport_DivisionXSport", b =>
                {
                    b.Property<int>("DXS_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("DXS_DivisionID")
                        .HasColumnType("int");

                    b.Property<int>("DXS_SportID")
                        .HasColumnType("int");

                    b.HasKey("DXS_ID");

                    b.HasIndex("DXS_DivisionID");

                    b.HasIndex("DXS_SportID");

                    b.ToTable("Sport_DivisionXSport", "conf");
                });

            modelBuilder.Entity("eGym.Core.Domain.Sport_EventResult", b =>
                {
                    b.Property<int>("SER_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("SER_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SER_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SER_Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SER_ValueForRanking")
                        .HasColumnType("int");

                    b.HasKey("SER_ID");

                    b.ToTable("Sport_EventResult", "conf");

                    b.HasData(
                        new
                        {
                            SER_ID = 1,
                            SER_Name = "Defeat",
                            SER_ValueForRanking = 0
                        },
                        new
                        {
                            SER_ID = 2,
                            SER_Name = "Draw",
                            SER_ValueForRanking = 0
                        },
                        new
                        {
                            SER_ID = 3,
                            SER_Name = "Victory",
                            SER_ValueForRanking = 1
                        });
                });

            modelBuilder.Entity("eGym.Core.Domain.Sport_EventResultLocalized", b =>
                {
                    b.Property<int>("SerL_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("SerL_Culture")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("SerL_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SerL_EventResultID")
                        .HasColumnType("int");

                    b.Property<string>("SerL_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SerL_ID");

                    b.HasIndex("SerL_EventResultID");

                    b.ToTable("Sport_EventResultLocalized", "conf");

                    b.HasData(
                        new
                        {
                            SerL_ID = 1,
                            SerL_Culture = "it",
                            SerL_EventResultID = 1,
                            SerL_Name = "Sconfitta"
                        },
                        new
                        {
                            SerL_ID = 2,
                            SerL_Culture = "it",
                            SerL_EventResultID = 2,
                            SerL_Name = "Pareggio"
                        },
                        new
                        {
                            SerL_ID = 3,
                            SerL_Culture = "it",
                            SerL_EventResultID = 3,
                            SerL_Name = "Vittoria"
                        });
                });

            modelBuilder.Entity("eGym.Core.Domain.Sport_EventResultType", b =>
                {
                    b.Property<int>("SERT_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("SERT_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SERT_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SERT_Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SERT_ID");

                    b.ToTable("Sport_EventResultType", "conf");

                    b.HasData(
                        new
                        {
                            SERT_ID = 1,
                            SERT_Name = "Unanimus decision"
                        },
                        new
                        {
                            SERT_ID = 2,
                            SERT_Name = "Split decision"
                        },
                        new
                        {
                            SERT_ID = 3,
                            SERT_Name = "TKO"
                        },
                        new
                        {
                            SERT_ID = 4,
                            SERT_Name = "KO"
                        },
                        new
                        {
                            SERT_ID = 5,
                            SERT_Name = "Submission"
                        },
                        new
                        {
                            SERT_ID = 6,
                            SERT_Name = "Medical decision"
                        });
                });

            modelBuilder.Entity("eGym.Core.Domain.Sport_EventResultTypeLocalized", b =>
                {
                    b.Property<int>("SertL_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("SertL_Culture")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("SertL_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SertL_EventResultTypeID")
                        .HasColumnType("int");

                    b.Property<string>("SertL_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SertL_ID");

                    b.HasIndex("SertL_EventResultTypeID");

                    b.ToTable("Sport_EventResultTypeLocalized", "conf");

                    b.HasData(
                        new
                        {
                            SertL_ID = 1,
                            SertL_Culture = "it",
                            SertL_EventResultTypeID = 1,
                            SertL_Name = "Decisione unanime"
                        },
                        new
                        {
                            SertL_ID = 2,
                            SertL_Culture = "it",
                            SertL_EventResultTypeID = 2,
                            SertL_Name = "Split decision"
                        },
                        new
                        {
                            SertL_ID = 3,
                            SertL_Culture = "it",
                            SertL_EventResultTypeID = 3,
                            SertL_Name = "KO tecnico"
                        },
                        new
                        {
                            SertL_ID = 4,
                            SertL_Culture = "it",
                            SertL_EventResultTypeID = 4,
                            SertL_Name = "KO"
                        },
                        new
                        {
                            SertL_ID = 5,
                            SertL_Culture = "it",
                            SertL_EventResultTypeID = 5,
                            SertL_Name = "Sottomissione"
                        },
                        new
                        {
                            SertL_ID = 6,
                            SertL_Culture = "it",
                            SertL_EventResultTypeID = 6,
                            SertL_Name = "Decisione medica"
                        });
                });

            modelBuilder.Entity("eGym.Core.Domain.Sport_Level", b =>
                {
                    b.Property<int>("SL_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("SL_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SL_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SL_Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SL_ID");

                    b.ToTable("Sport_Level", "conf");

                    b.HasData(
                        new
                        {
                            SL_ID = 1,
                            SL_Name = "Rookie"
                        },
                        new
                        {
                            SL_ID = 2,
                            SL_Name = "Amateur"
                        },
                        new
                        {
                            SL_ID = 3,
                            SL_Name = "SemiPro"
                        },
                        new
                        {
                            SL_ID = 4,
                            SL_Name = "Pro"
                        },
                        new
                        {
                            SL_ID = 5,
                            SL_Name = "Veteran"
                        });
                });

            modelBuilder.Entity("eGym.Core.Domain.Sport_LevelLocalized", b =>
                {
                    b.Property<int>("SLL_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("SLL_Culture")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("SLL_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SLL_LevelID")
                        .HasColumnType("int");

                    b.Property<int?>("SLL_MaxAge")
                        .HasColumnType("int");

                    b.Property<int?>("SLL_MinAge")
                        .HasColumnType("int");

                    b.Property<string>("SLL_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SLL_ID");

                    b.HasIndex("SLL_LevelID");

                    b.ToTable("Sport_LevelLocalized", "conf");

                    b.HasData(
                        new
                        {
                            SLL_ID = 1,
                            SLL_Culture = "it",
                            SLL_LevelID = 1,
                            SLL_Name = "Praticante amatoriale"
                        },
                        new
                        {
                            SLL_ID = 2,
                            SLL_Culture = "it",
                            SLL_LevelID = 2,
                            SLL_Name = "Esordiente"
                        },
                        new
                        {
                            SLL_ID = 3,
                            SLL_Culture = "it",
                            SLL_LevelID = 3,
                            SLL_Name = "SemiPro"
                        },
                        new
                        {
                            SLL_ID = 4,
                            SLL_Culture = "it",
                            SLL_LevelID = 4,
                            SLL_Name = "Pro"
                        },
                        new
                        {
                            SLL_ID = 5,
                            SLL_Culture = "it",
                            SLL_LevelID = 5,
                            SLL_Name = "Veterano"
                        });
                });

            modelBuilder.Entity("eGym.Core.Domain.Sport_LevelXSport", b =>
                {
                    b.Property<int>("LXS_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("LXS_LevelID")
                        .HasColumnType("int");

                    b.Property<int>("LXS_SportID")
                        .HasColumnType("int");

                    b.HasKey("LXS_ID");

                    b.HasIndex("LXS_LevelID");

                    b.HasIndex("LXS_SportID");

                    b.ToTable("Sport_LevelXSport", "conf");
                });

            modelBuilder.Entity("eGym.Core.Domain.Sport_Master", b =>
                {
                    b.Property<int>("Spr_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Spr_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Spr_FromDate")
                        .HasColumnType("date");

                    b.Property<string>("Spr_FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Spr_Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Spr_Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Spr_ToDate")
                        .HasColumnType("date");

                    b.HasKey("Spr_ID");

                    b.ToTable("Sport_Master", "conf");
                });

            modelBuilder.Entity("eGym.Core.Domain.Sport_Schedule", b =>
                {
                    b.Property<int>("SS_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("SS_AllowSelfRegistration")
                        .HasColumnType("bit");

                    b.Property<int?>("SS_DayOfWeek")
                        .HasColumnType("int");

                    b.Property<bool>("SS_Everyday")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("SS_FromTime")
                        .HasColumnType("time(0)");

                    b.Property<int?>("SS_RegistrationCloseBeforeMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("SS_RequireRegistration")
                        .HasColumnType("bit");

                    b.Property<int>("SS_SportID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("SS_ToTime")
                        .HasColumnType("time(0)");

                    b.HasKey("SS_ID");

                    b.HasIndex("SS_SportID");

                    b.ToTable("Sport_Schedule", "conf");
                });

            modelBuilder.Entity("eGym.Core.Domain.Anag_Address", b =>
                {
                    b.HasOne("eGym.Core.Domain.Anag_Master", "Anag_Master")
                        .WithMany("Anag_Addresses")
                        .HasForeignKey("Adr_AnagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eGym.Core.Domain.Country", "Country")
                        .WithMany("Anag_Addresses")
                        .HasForeignKey("Adr_Country")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Anag_Master");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("eGym.Core.Domain.Anag_AddressRole", b =>
                {
                    b.HasOne("eGym.Core.Domain.Anag_Address", "Anag_Address")
                        .WithMany("Anag_AddressRoles")
                        .HasForeignKey("AdrR_AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anag_Address");
                });

            modelBuilder.Entity("eGym.Core.Domain.Anag_Contact", b =>
                {
                    b.HasOne("eGym.Core.Domain.Anag_Master", "Anag_Master")
                        .WithMany("Anag_Contacts")
                        .HasForeignKey("Cnt_AnagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anag_Master");
                });

            modelBuilder.Entity("eGym.Core.Domain.Anag_CorporateRole", b =>
                {
                    b.HasOne("eGym.Core.Domain.Anag_Master", "Anag_Master")
                        .WithMany("Anag_CorporateRoles")
                        .HasForeignKey("CR_AnagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anag_Master");
                });

            modelBuilder.Entity("eGym.Core.Domain.Anag_Document", b =>
                {
                    b.HasOne("eGym.Core.Domain.Anag_Master", "Anag_Master")
                        .WithMany("Anag_Documents")
                        .HasForeignKey("Doc_AnagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anag_Master");
                });

            modelBuilder.Entity("eGym.Core.Domain.Anag_Master", b =>
                {
                    b.HasOne("eGym.Core.Domain.Country", "Country")
                        .WithMany("Anag_Masters")
                        .HasForeignKey("Ang_BirthCountry")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("eGym.Core.Domain.Anag_MasterRole", b =>
                {
                    b.HasOne("eGym.Core.Domain.Anag_Master", "Anag_Master")
                        .WithMany("Anag_MasterRoles")
                        .HasForeignKey("AngR_AnagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anag_Master");
                });

            modelBuilder.Entity("eGym.Core.Domain.Athlete_DivisionXAthlete", b =>
                {
                    b.HasOne("eGym.Core.Domain.Athlete_Master", "Athlete_Master")
                        .WithMany("Athlete_DivisionXAthletes")
                        .HasForeignKey("DXA_AthleteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eGym.Core.Domain.Sport_Division", "Sport_Division")
                        .WithMany("Athlete_DivisionXAthletes")
                        .HasForeignKey("DXA_DivisionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete_Master");

                    b.Navigation("Sport_Division");
                });

            modelBuilder.Entity("eGym.Core.Domain.Athlete_LevelXAthlete", b =>
                {
                    b.HasOne("eGym.Core.Domain.Athlete_Master", "Athlete_Master")
                        .WithMany("Athlete_LevelXAthletes")
                        .HasForeignKey("LXA_AthleteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eGym.Core.Domain.Sport_Level", "Sport_Level")
                        .WithMany("Athlete_LevelXAthletes")
                        .HasForeignKey("LXA_LevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete_Master");

                    b.Navigation("Sport_Level");
                });

            modelBuilder.Entity("eGym.Core.Domain.Athlete_Master", b =>
                {
                    b.HasOne("eGym.Core.Domain.Anag_Master", "Anag_Master")
                        .WithOne("Athlete_Master")
                        .HasForeignKey("eGym.Core.Domain.Athlete_Master", "Ath_AnagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eGym.Core.Domain.Sport_Master", "Sport_Master")
                        .WithMany("Athlete_Masters")
                        .HasForeignKey("Ath_SportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anag_Master");

                    b.Navigation("Sport_Master");
                });

            modelBuilder.Entity("eGym.Core.Domain.Athlete_WeightXAthlete", b =>
                {
                    b.HasOne("eGym.Core.Domain.Athlete_Master", "Athlete_Master")
                        .WithMany("Athlete_WeightXAthletes")
                        .HasForeignKey("WXA_AthleteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete_Master");
                });

            modelBuilder.Entity("eGym.Core.Domain.Sport_DivisionLocalized", b =>
                {
                    b.HasOne("eGym.Core.Domain.Sport_Division", "Sport_Division")
                        .WithMany("Sport_DivisionLocalizeds")
                        .HasForeignKey("SDL_DivisionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport_Division");
                });

            modelBuilder.Entity("eGym.Core.Domain.Sport_DivisionXSport", b =>
                {
                    b.HasOne("eGym.Core.Domain.Sport_Division", "Sport_Division")
                        .WithMany("Sport_DivisionXSports")
                        .HasForeignKey("DXS_DivisionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eGym.Core.Domain.Sport_Master", "Sport_Master")
                        .WithMany("Sport_DivisionXSports")
                        .HasForeignKey("DXS_SportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport_Division");

                    b.Navigation("Sport_Master");
                });

            modelBuilder.Entity("eGym.Core.Domain.Sport_EventResultLocalized", b =>
                {
                    b.HasOne("eGym.Core.Domain.Sport_EventResult", "Sport_EventResult")
                        .WithMany("Sport_EventResultLocalizeds")
                        .HasForeignKey("SerL_EventResultID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport_EventResult");
                });

            modelBuilder.Entity("eGym.Core.Domain.Sport_EventResultTypeLocalized", b =>
                {
                    b.HasOne("eGym.Core.Domain.Sport_EventResultType", "Sport_EventResultType")
                        .WithMany("Sport_EventResultTypeLocalizeds")
                        .HasForeignKey("SertL_EventResultTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport_EventResultType");
                });

            modelBuilder.Entity("eGym.Core.Domain.Sport_LevelLocalized", b =>
                {
                    b.HasOne("eGym.Core.Domain.Sport_Level", "Sport_Level")
                        .WithMany("Sport_LevelLocalizeds")
                        .HasForeignKey("SLL_LevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport_Level");
                });

            modelBuilder.Entity("eGym.Core.Domain.Sport_LevelXSport", b =>
                {
                    b.HasOne("eGym.Core.Domain.Sport_Level", "Sport_Level")
                        .WithMany("Sport_LevelXSports")
                        .HasForeignKey("LXS_LevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eGym.Core.Domain.Sport_Master", "Sport_Master")
                        .WithMany("Sport_LevelXSports")
                        .HasForeignKey("LXS_SportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport_Level");

                    b.Navigation("Sport_Master");
                });

            modelBuilder.Entity("eGym.Core.Domain.Sport_Schedule", b =>
                {
                    b.HasOne("eGym.Core.Domain.Sport_Master", "Sport_Master")
                        .WithMany("Sport_Schedules")
                        .HasForeignKey("SS_SportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport_Master");
                });

            modelBuilder.Entity("eGym.Core.Domain.Anag_Address", b =>
                {
                    b.Navigation("Anag_AddressRoles");
                });

            modelBuilder.Entity("eGym.Core.Domain.Anag_Master", b =>
                {
                    b.Navigation("Anag_Addresses");

                    b.Navigation("Anag_Contacts");

                    b.Navigation("Anag_CorporateRoles");

                    b.Navigation("Anag_Documents");

                    b.Navigation("Anag_MasterRoles");

                    b.Navigation("Athlete_Master");
                });

            modelBuilder.Entity("eGym.Core.Domain.Athlete_Master", b =>
                {
                    b.Navigation("Athlete_DivisionXAthletes");

                    b.Navigation("Athlete_LevelXAthletes");

                    b.Navigation("Athlete_WeightXAthletes");
                });

            modelBuilder.Entity("eGym.Core.Domain.Country", b =>
                {
                    b.Navigation("Anag_Addresses");

                    b.Navigation("Anag_Masters");
                });

            modelBuilder.Entity("eGym.Core.Domain.Sport_Division", b =>
                {
                    b.Navigation("Athlete_DivisionXAthletes");

                    b.Navigation("Sport_DivisionLocalizeds");

                    b.Navigation("Sport_DivisionXSports");
                });

            modelBuilder.Entity("eGym.Core.Domain.Sport_EventResult", b =>
                {
                    b.Navigation("Sport_EventResultLocalizeds");
                });

            modelBuilder.Entity("eGym.Core.Domain.Sport_EventResultType", b =>
                {
                    b.Navigation("Sport_EventResultTypeLocalizeds");
                });

            modelBuilder.Entity("eGym.Core.Domain.Sport_Level", b =>
                {
                    b.Navigation("Athlete_LevelXAthletes");

                    b.Navigation("Sport_LevelLocalizeds");

                    b.Navigation("Sport_LevelXSports");
                });

            modelBuilder.Entity("eGym.Core.Domain.Sport_Master", b =>
                {
                    b.Navigation("Athlete_Masters");

                    b.Navigation("Sport_DivisionXSports");

                    b.Navigation("Sport_LevelXSports");

                    b.Navigation("Sport_Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
